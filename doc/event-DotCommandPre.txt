*event-DotCommandPre.txt*	Add an autocmd event 'DotCommandPre'.
						Last change:17-Dec-2016.

Author  : machakann <https://github.com/machakann>
License : NYSL license
          Japanese <http://www.kmonos.net/nysl/>
          English (Unofficial) <http://www.kmonos.net/nysl/index.en.html>

Requirement:	Vim 8.0 or higher

==============================================================================
CONTENTS				*event-DotCommandPre-contents*

USAGE		|event-DotCommandPre-usage|
  For Users
  Fot Developers
KEYMAPPINGS	|event-DotCommandPre-keymappings|
AUTOCOMMANDS	|event-DotCommandPre-autocommands|

==============================================================================
USAGE					*event-DotCommandPre-usage*

This plugin adds an {event} for |:autocmd| command named |DotCommandPre|
which triggered right before an use of dot command (|.|).

------------------------------------------------------------------------------

For Users~
If you are not using any other plugin defining key mapping to `.`, add the
line into your vimrc to use |<Plug>(event-DotCommandPre+Dot)|:
>
	nmap . <Plug>(event-DotCommandPre+Dot)
<

If you are using another plugin defining a key mapping to `.`, for example
`<Plug>(CustomDot)`, then map |<Plug>(event-DotCommandPre)| before the key
mapping:
>
	nmap . <Plug>(event-DotCommandPre)<Plug>(CustomDot)
<
If you are using `repeat.vim` (vimscript #2136), `<Plug>(RepeatDot)`
definition is delayed. Thus, in order to ensure the mapping exists, add the
lines:
>
	runtime autoload/repeat.vim
	nmap . <Plug>(event-DotCommandPre)<Plug>(RepeatDot)
<
In addition, If you are using `visualrepeat.vim` (vimscript #3848) plugin,
define a similar key mapping also for visual mode.
>
	xmap . <Plug>(event-DotCommandPre+Dot)
<

------------------------------------------------------------------------------

For Developers~
Developers can hook their processes by using an event |DotCommandPre|. It is a
kind of |User| defined event, thus use like this:
>
	autocmd! User DotCommandPre echo 'Right before a dot command!'
<
Note: Developers should avoid side effects in hooked processes. Do not change
buffer text, restore cursor position, and avoid anything unexpected.

					*g:DotCommandPre*
In addition, some information before the dot command (|.|) operation would be
saved to a global |Dictionary| named |g:DotCommandPre|. Available keys are
listed below.
	`mode` : A character representing the mode dot command (|.|) is used,
		'n' for |Normal-mode| and 'x' for |Visual-mode|. In almost all
		cases, it would be 'n', 'x' is possible only when user is
		using `visualrepeat.vim` (vimscript #3848) plugin. It is not
		necessarily to think on that.
	`curpos`: A |list| that contains the cursor position when dot command
		is used, in same format with |getcurpos()| function.
	`view` : A |Dictionary| that contains information to restore the view
		of the window which dot command is used. It has same keys with
		a return value of |winsaveview()| and thus it could be used
		with |winrestview()|

|g:DotCommandPre| is useful to check if the autocommand {event}
|DotCommandPre| has been triggered or not.
>
	if exists('g:DotCommandPre')
		echo '"DotCommandPre" has been triggered!'
		call winrestview(g:DotCommandPre.view)
	endif
<


==============================================================================
KEYMAPPINGS				*event-DotCommandPre-keymappings*

<Plug>(event-DotCommandPre)		*<Plug>(event-DotCommandPre)*
	An key mapping to trigger |DotCommandPre| autocommand {event}. It does
	nothing other than that.

<Plug>(event-DotCommandPre+Dot)		*<Plug>(event-DotCommandPre+Dot)*
	An key mapping to trigger |DotCommandPre| autocommand {event}. It
	executes dot command |.| after the {event}.

==============================================================================
AUTOCMD-EVENTS				*event-DotCommandPre-autocommands*

DotCommandPre				*DotCommandPre*
	Right before an use of dot command (|.|). Should not change the
	buffer, should not move cursor position, avoid any side effects.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:
